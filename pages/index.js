import Head from 'next/head'
import { Button, Container, Input, Loading, Text } from '@nextui-org/react'

import { gql, useMutation, useQuery } from '@apollo/client'

import {apolloClient} from '../apollo'
 
import DefaultLayout from '../layouts/DefaultLayout'

import TodoCard from '../components/TodoCard'
import { useState } from 'react'

const fetchTodos = gql`
  query MyQuery {
    todolist {
      id
      title
      is_done
    }
  }

  `

const insertTodos = gql`
mutation MyMutation($id_user: Int, $title: String) {
  insert_todolist(objects: {id_user: $id_user, title: $title}) {
    affected_rows
  }
}
`

export default function Home() {

  const [input,setInput] = useState('')

  const [loadingData,setLoadingData] = useState(false)

  const {data, loading, refetch} = useQuery(fetchTodos)

  const [addTodo] = useMutation(insertTodos)

  const handleRefetch =  () =>{
    refetch()
  }

  const handleChangeInput = (e) =>{
    setInput(e.target.value)
  }

  const handleSubmit = async () =>{
    setLoadingData(true)
    await addTodo({variables:{
      id_user : 2,
      title : input
    }})
    await refetch()
    setLoadingData(false)
    setInput('')
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DefaultLayout>

            <Container 
            css={{
              mt : '$20',
              display : 'flex',
              rowGap : '$10',
              flexDirection : 'column',
              alignItems: 'center'
            }}
            >

                <Text
                
                h1>Todos</Text>

                <Input
                labelPlaceholder='Your Todo'
                clearable
                underlined
                value={input}
                shadow
                fullWidth
                onChange={handleChangeInput}
                contentRight={loadingData && <Loading/>}
                />

                <Button
                shadow
                color='gradient'
                rounded
                ghost
                onClick={handleSubmit}
                >
                  Submit</Button>

                {loading&& 
                <Loading/>
                }

                {data?.todolist.map((todo)=>(
                  
                  <TodoCard todo={todo} handleRefetch={handleRefetch}/>

                ))}

            </Container>

      </DefaultLayout>
      
    </>
  )
}

